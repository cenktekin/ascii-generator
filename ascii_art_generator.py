#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
T√ºrk√ße Destekli Renkli ASCII Art Generator
Kullanƒ±cƒ±nƒ±n girdiƒüi metni renkli ASCII sanatƒ± olarak ekrana yazdƒ±rƒ±r.
"""

import os

# ANSI Renk Kodlarƒ±
class Colors:
    RESET = '\033[0m'
    BOLD = '\033[1m'
    
    # Ana renkler
    RED = '\033[91m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    MAGENTA = '\033[95m'
    CYAN = '\033[96m'
    WHITE = '\033[97m'
    
    # Arka plan renkleri
    BG_RED = '\033[101m'
    BG_GREEN = '\033[102m'
    BG_YELLOW = '\033[103m'
    BG_BLUE = '\033[104m'
    BG_MAGENTA = '\033[105m'
    BG_CYAN = '\033[106m'
    
    # Gradient renkler
    ORANGE = '\033[38;5;208m'
    PINK = '\033[38;5;205m'
    PURPLE = '\033[38;5;129m'
    LIME = '\033[38;5;154m'
    GOLD = '\033[38;5;220m'

# Renk temalarƒ±
COLOR_THEMES = {
    '1': {
        'name': 'üåà G√∂kku≈üaƒüƒ±',
        'colors': [Colors.RED, Colors.ORANGE, Colors.YELLOW, Colors.GREEN, Colors.CYAN, Colors.BLUE, Colors.MAGENTA]
    },
    '2': {
        'name': 'üî• Ate≈ü',
        'colors': [Colors.RED, Colors.ORANGE, Colors.YELLOW, Colors.GOLD]
    },
    '3': {
        'name': 'üåä Okyanus',
        'colors': [Colors.BLUE, Colors.CYAN, Colors.LIME]
    },
    '4': {
        'name': 'üå∏ Pembe D√ºnya',
        'colors': [Colors.PINK, Colors.MAGENTA, Colors.PURPLE]
    },
    '5': {
        'name': 'üåø Doƒüa',
        'colors': [Colors.GREEN, Colors.LIME, Colors.YELLOW]
    },
    '6': {
        'name': '‚≠ê Altƒ±n',
        'colors': [Colors.GOLD, Colors.YELLOW, Colors.ORANGE]
    },
    '7': {
        'name': 'üé≠ Rastgele',
        'colors': [Colors.RED, Colors.GREEN, Colors.YELLOW, Colors.BLUE, Colors.MAGENTA, Colors.CYAN, Colors.ORANGE, Colors.PINK]
    }
}

# ASCII karakter haritasƒ± - her karakter 5x3 boyutunda
ASCII_MAP = {
    'a': [
        " ‚ñà‚ñà‚ñà ",
        "‚ñà   ‚ñà",
        "‚ñà‚ñà‚ñà‚ñà‚ñà",
        "‚ñà   ‚ñà",
        "‚ñà   ‚ñà"
    ],
    'b': [
        "‚ñà‚ñà‚ñà‚ñà ",
        "‚ñà   ‚ñà",
        "‚ñà‚ñà‚ñà‚ñà ",
        "‚ñà   ‚ñà",
        "‚ñà‚ñà‚ñà‚ñà "
    ],
    'c': [
        " ‚ñà‚ñà‚ñà ",
        "‚ñà    ",
        "‚ñà    ",
        "‚ñà    ",
        " ‚ñà‚ñà‚ñà "
    ],
    'd': [
        "‚ñà‚ñà‚ñà‚ñà ",
        "‚ñà   ‚ñà",
        "‚ñà   ‚ñà",
        "‚ñà   ‚ñà",
        "‚ñà‚ñà‚ñà‚ñà "
    ],
    'e': [
        "‚ñà‚ñà‚ñà‚ñà‚ñà",
        "‚ñà    ",
        "‚ñà‚ñà‚ñà‚ñà ",
        "‚ñà    ",
        "‚ñà‚ñà‚ñà‚ñà‚ñà"
    ],
    'f': [
        "‚ñà‚ñà‚ñà‚ñà‚ñà",
        "‚ñà    ",
        "‚ñà‚ñà‚ñà‚ñà ",
        "‚ñà    ",
        "‚ñà    "
    ],
    'g': [
        " ‚ñà‚ñà‚ñà ",
        "‚ñà    ",
        "‚ñà ‚ñà‚ñà ",
        "‚ñà   ‚ñà",
        " ‚ñà‚ñà‚ñà "
    ],
    'h': [
        "‚ñà   ‚ñà",
        "‚ñà   ‚ñà",
        "‚ñà‚ñà‚ñà‚ñà‚ñà",
        "‚ñà   ‚ñà",
        "‚ñà   ‚ñà"
    ],
    'i': [
        "‚ñà‚ñà‚ñà‚ñà‚ñà",
        "  ‚ñà  ",
        "  ‚ñà  ",
        "  ‚ñà  ",
        "‚ñà‚ñà‚ñà‚ñà‚ñà"
    ],
    'j': [
        "‚ñà‚ñà‚ñà‚ñà‚ñà",
        "    ‚ñà",
        "    ‚ñà",
        "‚ñà   ‚ñà",
        " ‚ñà‚ñà‚ñà "
    ],
    'k': [
        "‚ñà   ‚ñà",
        "‚ñà  ‚ñà ",
        "‚ñà‚ñà‚ñà  ",
        "‚ñà  ‚ñà ",
        "‚ñà   ‚ñà"
    ],
    'l': [
        "‚ñà    ",
        "‚ñà    ",
        "‚ñà    ",
        "‚ñà    ",
        "‚ñà‚ñà‚ñà‚ñà‚ñà"
    ],
    'm': [
        "‚ñà   ‚ñà",
        "‚ñà‚ñà ‚ñà‚ñà",
        "‚ñà ‚ñà ‚ñà",
        "‚ñà   ‚ñà",
        "‚ñà   ‚ñà"
    ],
    'n': [
        "‚ñà   ‚ñà",
        "‚ñà‚ñà  ‚ñà",
        "‚ñà ‚ñà ‚ñà",
        "‚ñà  ‚ñà‚ñà",
        "‚ñà   ‚ñà"
    ],
    'o': [
        " ‚ñà‚ñà‚ñà ",
        "‚ñà   ‚ñà",
        "‚ñà   ‚ñà",
        "‚ñà   ‚ñà",
        " ‚ñà‚ñà‚ñà "
    ],
    'p': [
        "‚ñà‚ñà‚ñà‚ñà ",
        "‚ñà   ‚ñà",
        "‚ñà‚ñà‚ñà‚ñà ",
        "‚ñà    ",
        "‚ñà    "
    ],
    'q': [
        " ‚ñà‚ñà‚ñà ",
        "‚ñà   ‚ñà",
        "‚ñà   ‚ñà",
        "‚ñà  ‚ñà‚ñà",
        " ‚ñà‚ñà‚ñà‚ñà"
    ],
    'r': [
        "‚ñà‚ñà‚ñà‚ñà ",
        "‚ñà   ‚ñà",
        "‚ñà‚ñà‚ñà‚ñà ",
        "‚ñà  ‚ñà ",
        "‚ñà   ‚ñà"
    ],
    's': [
        " ‚ñà‚ñà‚ñà ",
        "‚ñà    ",
        " ‚ñà‚ñà‚ñà ",
        "    ‚ñà",
        " ‚ñà‚ñà‚ñà "
    ],
    't': [
        "‚ñà‚ñà‚ñà‚ñà‚ñà",
        "  ‚ñà  ",
        "  ‚ñà  ",
        "  ‚ñà  ",
        "  ‚ñà  "
    ],
    'u': [
        "‚ñà   ‚ñà",
        "‚ñà   ‚ñà",
        "‚ñà   ‚ñà",
        "‚ñà   ‚ñà",
        " ‚ñà‚ñà‚ñà "
    ],
    'v': [
        "‚ñà   ‚ñà",
        "‚ñà   ‚ñà",
        "‚ñà   ‚ñà",
        " ‚ñà ‚ñà ",
        "  ‚ñà  "
    ],
    'w': [
        "‚ñà   ‚ñà",
        "‚ñà   ‚ñà",
        "‚ñà ‚ñà ‚ñà",
        "‚ñà‚ñà ‚ñà‚ñà",
        "‚ñà   ‚ñà"
    ],
    'x': [
        "‚ñà   ‚ñà",
        " ‚ñà ‚ñà ",
        "  ‚ñà  ",
        " ‚ñà ‚ñà ",
        "‚ñà   ‚ñà"
    ],
    'y': [
        "‚ñà   ‚ñà",
        " ‚ñà ‚ñà ",
        "  ‚ñà  ",
        "  ‚ñà  ",
        "  ‚ñà  "
    ],
    'z': [
        "‚ñà‚ñà‚ñà‚ñà‚ñà",
        "   ‚ñà ",
        "  ‚ñà  ",
        " ‚ñà   ",
        "‚ñà‚ñà‚ñà‚ñà‚ñà"
    ],
    # T√ºrk√ße karakterler
    '√ß': [
        " ‚ñà‚ñà‚ñà ",
        "‚ñà    ",
        "‚ñà    ",
        "‚ñà    ",
        " ‚ñà‚ñà‚ñà ",
    ],
    '≈ü': [
        " ‚ñà‚ñà‚ñà ",
        "‚ñà    ",
        " ‚ñà‚ñà‚ñà ",
        "    ‚ñà",
        " ‚ñà‚ñà‚ñà "
    ],
    'ƒ±': [
        "     ",
        "  ‚ñà  ",
        "  ‚ñà  ",
        "  ‚ñà  ",
        "  ‚ñà  "
    ],
    'ƒü': [
        " ‚ñÑ‚ñÑ  ",
        " ‚ñà‚ñà‚ñà ",
        "‚ñà    ",
        "‚ñà ‚ñà‚ñà ",
        " ‚ñà‚ñà‚ñà "
    ],
    '√∂': [
        " ‚ñÑ ‚ñÑ ",
        " ‚ñà‚ñà‚ñà ",
        "‚ñà   ‚ñà",
        "‚ñà   ‚ñà",
        " ‚ñà‚ñà‚ñà "
    ],
    '√º': [
        " ‚ñÑ ‚ñÑ ",
        "‚ñà   ‚ñà",
        "‚ñà   ‚ñà",
        "‚ñà   ‚ñà",
        " ‚ñà‚ñà‚ñà "
    ],
    # Rakamlar
    '0': [
        " ‚ñà‚ñà‚ñà ",
        "‚ñà   ‚ñà",
        "‚ñà   ‚ñà",
        "‚ñà   ‚ñà",
        " ‚ñà‚ñà‚ñà "
    ],
    '1': [
        "  ‚ñà  ",
        " ‚ñà‚ñà  ",
        "  ‚ñà  ",
        "  ‚ñà  ",
        "‚ñà‚ñà‚ñà‚ñà‚ñà"
    ],
    '2': [
        " ‚ñà‚ñà‚ñà ",
        "‚ñà   ‚ñà",
        "   ‚ñà ",
        " ‚ñà   ",
        "‚ñà‚ñà‚ñà‚ñà‚ñà"
    ],
    '3': [
        " ‚ñà‚ñà‚ñà ",
        "    ‚ñà",
        " ‚ñà‚ñà‚ñà ",
        "    ‚ñà",
        " ‚ñà‚ñà‚ñà "
    ],
    '4': [
        "‚ñà   ‚ñà",
        "‚ñà   ‚ñà",
        "‚ñà‚ñà‚ñà‚ñà‚ñà",
        "    ‚ñà",
        "    ‚ñà"
    ],
    '5': [
        "‚ñà‚ñà‚ñà‚ñà‚ñà",
        "‚ñà    ",
        "‚ñà‚ñà‚ñà‚ñà ",
        "    ‚ñà",
        "‚ñà‚ñà‚ñà‚ñà "
    ],
    '6': [
        " ‚ñà‚ñà‚ñà ",
        "‚ñà    ",
        "‚ñà‚ñà‚ñà‚ñà ",
        "‚ñà   ‚ñà",
        " ‚ñà‚ñà‚ñà "
    ],
    '7': [
        "‚ñà‚ñà‚ñà‚ñà‚ñà",
        "    ‚ñà",
        "   ‚ñà ",
        "  ‚ñà  ",
        " ‚ñà   "
    ],
    '8': [
        " ‚ñà‚ñà‚ñà ",
        "‚ñà   ‚ñà",
        " ‚ñà‚ñà‚ñà ",
        "‚ñà   ‚ñà",
        " ‚ñà‚ñà‚ñà "
    ],
    '9': [
        " ‚ñà‚ñà‚ñà ",
        "‚ñà   ‚ñà",
        " ‚ñà‚ñà‚ñà‚ñà",
        "    ‚ñà",
        " ‚ñà‚ñà‚ñà "
    ],
    # Bo≈üluk ve √∂zel karakterler
    ' ': [
        "     ",
        "     ",
        "     ",
        "     ",
        "     "
    ],
    '?': [
        " ‚ñà‚ñà‚ñà ",
        "‚ñà   ‚ñà",
        "   ‚ñà ",
        "     ",
        "  ‚ñà  "
    ],
    '!': [
        "  ‚ñà  ",
        "  ‚ñà  ",
        "  ‚ñà  ",
        "     ",
        "  ‚ñà  "
    ],
    '.': [
        "     ",
        "     ",
        "     ",
        "     ",
        "  ‚ñà  "
    ],
    ',': [
        "     ",
        "     ",
        "     ",
        "  ‚ñà  ",
        " ‚ñà   "
    ]
}

# ASCII ≈ûekil ≈ûablonlarƒ± - ƒ∞simlerle e≈üle≈ütirilecek
ASCII_SHAPES = {
    'ku≈ü': [
        "        ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ",
        "      ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÑ",
        "     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÑ",
        "    ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà",
        "   ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÄ‚ñÄ",
        "  ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÄ",
        " ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÄ",
        "‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÄ",
        "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÄ",
        "‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ"
    ],
    'kedi': [
        "   /\\   /\\",
        "  (  . .  )",
        "   )  ‚ñº  (",
        "  (  \\___/  )",
        "   \\       /",
        "    \\     /",
        "     |   |",
        "     |   |",
        "    /|   |\\",
        "   (_)   (_)"
    ],
    'k√∂pek': [
        "      ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ",
        "    ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÑ",
        "   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà",
        "  ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÑ",
        "  ‚ñà‚ñà‚ñà‚ñà ‚ñÑ‚ñÑ ‚ñà‚ñà‚ñà‚ñà",
        "  ‚ñà‚ñà‚ñà‚ñà ‚ñÄ‚ñÄ ‚ñà‚ñà‚ñà‚ñà",
        "   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà",
        "    ‚ñÄ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÄ",
        "      ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ",
        "       U   U"
    ],
    '√ßi√ßek': [
        "      ‚ùÄ‚ùÄ‚ùÄ",
        "    ‚ùÄ‚ùÄ‚ùÄ‚ùÄ‚ùÄ‚ùÄ‚ùÄ",
        "   ‚ùÄ‚ùÄ‚ùÄ‚ùÄ‚ùÄ‚ùÄ‚ùÄ‚ùÄ‚ùÄ",
        "  ‚ùÄ‚ùÄ‚ùÄ‚ùÄ ‚óè ‚ùÄ‚ùÄ‚ùÄ‚ùÄ",
        "   ‚ùÄ‚ùÄ‚ùÄ‚ùÄ‚ùÄ‚ùÄ‚ùÄ‚ùÄ‚ùÄ",
        "    ‚ùÄ‚ùÄ‚ùÄ‚ùÄ‚ùÄ‚ùÄ‚ùÄ",
        "      ‚ùÄ‚ùÄ‚ùÄ",
        "       |",
        "       |",
        "      /|\\"
    ],
    'kalp': [
        "    ‚ô•‚ô•‚ô•   ‚ô•‚ô•‚ô•",
        "  ‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•",
        " ‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•",
        "‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•",
        "‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•",
        " ‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•",
        "  ‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•",
        "   ‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•",
        "    ‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•",
        "     ‚ô•‚ô•‚ô•‚ô•‚ô•"
    ],
    'yƒ±ldƒ±z': [
        "       ‚òÖ",
        "      ‚òÖ‚òÖ‚òÖ",
        "     ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ",
        "    ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ",
        "   ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ",
        "    ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ",
        "     ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ",
        "      ‚òÖ‚òÖ‚òÖ",
        "       ‚òÖ",
        "         "
    ],
    'g√ºne≈ü': [
        "    \\  |  /",
        "     \\ | /",
        "   -- ‚òÄ‚òÄ‚òÄ --",
        "     / | \\",
        "    /  |  \\",
        "           ",
        "    I≈üƒ±k ve",
        "    Sƒ±caklƒ±k",
        "           ",
        "           "
    ],
    'ay': [
        "      ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ",
        "    ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà",
        "   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÄ",
        "  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÄ",
        "  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà",
        "  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÑ",
        "   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÑ",
        "    ‚ñÄ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà",
        "      ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ",
        "           "
    ],
    'balƒ±k': [
        "     ><(((¬∫>",
        "    ><((((¬∫>",
        "   ><(((((¬∫>",
        "  ><((((((¬∫>",
        "   ><(((((¬∫>",
        "    ><((((¬∫>",
        "     ><(((¬∫>",
        "           ",
        "  ~ ~ ~ ~ ~",
        " ~ ~ ~ ~ ~ ~"
    ],
    'kelebek': [
        "   ‚ñÑ‚ñÑ ‚óè ‚ñÑ‚ñÑ",
        "  ‚ñà‚ñà‚ñà‚ñà‚ñÑ‚ñà‚ñà‚ñà‚ñà",
        " ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà",
        "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà",
        " ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà",
        "  ‚ñà‚ñà‚ñà‚ñà‚ñÄ‚ñà‚ñà‚ñà‚ñà",
        "   ‚ñÄ‚ñÄ ‚óè ‚ñÄ‚ñÄ",
        "      |",
        "      |",
        "     / \\"
    ],
    'aƒüa√ß': [
        "      üå≥üå≥üå≥",
        "    üå≥üå≥üå≥üå≥üå≥",
        "   üå≥üå≥üå≥üå≥üå≥üå≥",
        "  üå≥üå≥üå≥üå≥üå≥üå≥üå≥",
        "   üå≥üå≥üå≥üå≥üå≥üå≥",
        "    üå≥üå≥üå≥üå≥üå≥",
        "      |||||",
        "      |||||",
        "      |||||",
        "     ^^^^^^^"
    ],
    'ev': [
        "      /\\",
        "     /  \\",
        "    /____\\",
        "   |      |",
        "   |  []  |",
        "   |      |",
        "   |  __  |",
        "   | |  | |",
        "   |_|__|_|",
        "           "
    ],
    'araba': [
        "     ______",
        "    /|_||_\\`.__",
        "   (   _    _ _\\",
        "  =`-(_)--(_)-'",
        "              ",
        "   Vroom Vroom!",
        "              ",
        "              ",
        "              ",
        "              "
    ]
}

# ƒ∞sim-≈ûekil E≈üle≈ütirme S√∂zl√ºƒü√º
NAME_TO_SHAPE = {
    # Hayvanlar
    'ku≈ü': 'ku≈ü',
    'kus': 'ku≈ü',
    'bird': 'ku≈ü',
    'kedi': 'kedi',
    'cat': 'kedi',
    'k√∂pek': 'k√∂pek',
    'kopek': 'k√∂pek',
    'dog': 'k√∂pek',
    'balƒ±k': 'balƒ±k',
    'balik': 'balƒ±k',
    'fish': 'balƒ±k',
    'kelebek': 'kelebek',
    'butterfly': 'kelebek',
    
    # Doƒüa
    '√ßi√ßek': '√ßi√ßek',
    'cicek': '√ßi√ßek',
    'flower': '√ßi√ßek',
    'aƒüa√ß': 'aƒüa√ß',
    'agac': 'aƒüa√ß',
    'tree': 'aƒüa√ß',
    'g√ºne≈ü': 'g√ºne≈ü',
    'gunes': 'g√ºne≈ü',
    'sun': 'g√ºne≈ü',
    'ay': 'ay',
    'moon': 'ay',
    'yƒ±ldƒ±z': 'yƒ±ldƒ±z',
    'yildiz': 'yƒ±ldƒ±z',
    'star': 'yƒ±ldƒ±z',
    
    # Objeler
    'kalp': 'kalp',
    'heart': 'kalp',
    'ev': 'ev',
    'house': 'ev',
    'araba': 'araba',
    'car': 'araba',
    
    # Duygular/Kavramlar
    'sevgi': 'kalp',
    'love': 'kalp',
    'a≈ük': 'kalp',
    'ask': 'kalp',
    'mutluluk': 'g√ºne≈ü',
    'happiness': 'g√ºne≈ü',
    'g√ºzel': '√ßi√ßek',
    'guzel': '√ßi√ßek',
    'beautiful': '√ßi√ßek'
}

def clear_screen():
    """Ekranƒ± temizler."""
    os.system('clear' if os.name == 'posix' else 'cls')

def show_main_menu():
    """Ana men√ºy√º g√∂sterir ve kullanƒ±cƒ± se√ßimi alƒ±r."""
    print(f"{Colors.BOLD}{Colors.GOLD}üé® ASCII ART GENERATOR - ANA MEN√ú üé®{Colors.RESET}")
    print("=" * 50)
    print(f"{Colors.CYAN}1.{Colors.RESET} üìù Normal ASCII Sanatƒ± (Metin ‚Üí ASCII)")
    print(f"{Colors.MAGENTA}2.{Colors.RESET} üé≠ ƒ∞sim + ≈ûekil ASCII Sanatƒ± (Ku≈ü ‚Üí KU≈û + üê¶)")
    print(f"{Colors.RED}3.{Colors.RESET} ‚ùå √áƒ±kƒ±≈ü")
    print("=" * 50)
    
    while True:
        choice = input(f"{Colors.BOLD}Se√ßiminizi yapƒ±n (1-3): {Colors.RESET}").strip()
        if choice in ['1', '2', '3']:
            return choice
        print(f"{Colors.RED}Ge√ßersiz se√ßim! L√ºtfen 1, 2 veya 3 girin.{Colors.RESET}")

def show_color_menu():
    """Renk se√ßeneklerini g√∂sterir."""
    print(f"{Colors.BOLD}{Colors.CYAN}üé® RENK SE√áENEKLERI:{Colors.RESET}")
    print("=" * 40)
    
    for key, theme in COLOR_THEMES.items():
        colors_preview = ""
        for color in theme['colors'][:3]:  # ƒ∞lk 3 rengi g√∂ster
            colors_preview += f"{color}‚ñà{Colors.RESET}"
        print(f"{key}. {theme['name']} {colors_preview}")
    
    print("=" * 40)
    
    while True:
        choice = input("Renk temasƒ± se√ßin (1-7): ").strip()
        if choice in COLOR_THEMES:
            return COLOR_THEMES[choice]['colors']
        print(f"{Colors.RED}Ge√ßersiz se√ßim! L√ºtfen 1-7 arasƒ± bir sayƒ± girin.{Colors.RESET}")

def get_user_input():
    """Kullanƒ±cƒ±dan metin giri≈üi alƒ±r ve doƒürular."""
    while True:
        try:
            text = input(f"{Colors.BOLD}ASCII sanatƒ± i√ßin metin girin (max 20 karakter): {Colors.RESET}").strip()
            
            if len(text) == 0:
                print(f"{Colors.RED}L√ºtfen en az bir karakter girin!{Colors.RESET}")
                continue
            
            if len(text) > 20:
                print(f"{Colors.RED}Metin √ßok uzun! ({len(text)} karakter). Maksimum 20 karakter olmalƒ±.{Colors.RESET}")
                continue
            
            return text.lower()
            
        except KeyboardInterrupt:
            print(f"\n{Colors.YELLOW}√áƒ±kƒ±lƒ±yor...{Colors.RESET}")
            exit(0)
        except Exception as e:
            print(f"{Colors.RED}Bir hata olu≈ütu: {e}{Colors.RESET}")

def get_name_input():
    """Kullanƒ±cƒ±dan isim giri≈üi alƒ±r ve ≈üekil e≈üle≈ütirmesi yapar."""
    while True:
        try:
            name = input(f"{Colors.BOLD}ƒ∞sim girin (√∂rn: ku≈ü, kedi, √ßi√ßek): {Colors.RESET}").strip().lower()
            
            if len(name) == 0:
                print(f"{Colors.RED}L√ºtfen bir isim girin!{Colors.RESET}")
                continue
            
            if len(name) > 15:
                print(f"{Colors.RED}ƒ∞sim √ßok uzun! ({len(name)} karakter). Maksimum 15 karakter olmalƒ±.{Colors.RESET}")
                continue
            
            return name
            
        except KeyboardInterrupt:
            print(f"\n{Colors.YELLOW}√áƒ±kƒ±lƒ±yor...{Colors.RESET}")
            exit(0)
        except Exception as e:
            print(f"{Colors.RED}Bir hata olu≈ütu: {e}{Colors.RESET}")

def show_supported_names():
    """Desteklenen isimleri kategorilere g√∂re g√∂sterir."""
    print(f"\n{Colors.BOLD}{Colors.GOLD}üé≠ DESTEKLENƒ∞R ƒ∞Sƒ∞MLER:{Colors.RESET}")
    print("=" * 50)
    
    categories = {
        'üêæ Hayvanlar': ['ku≈ü', 'kedi', 'k√∂pek', 'balƒ±k', 'kelebek'],
        'üåø Doƒüa': ['√ßi√ßek', 'aƒüa√ß', 'g√ºne≈ü', 'ay', 'yƒ±ldƒ±z'],
        'üè† Objeler': ['kalp', 'ev', 'araba'],
        'üíù Duygular': ['sevgi', 'mutluluk', 'g√ºzel', 'a≈ük']
    }
    
    for category, names in categories.items():
        print(f"\n{Colors.BOLD}{category}:{Colors.RESET}")
        for name in names:
            print(f"  ‚Ä¢ {name}")
    
    print(f"\n{Colors.CYAN}üí° ƒ∞pucu: ƒ∞ngilizce kar≈üƒ±lƒ±klarƒ± da desteklenir (bird, cat, flower vs.){Colors.RESET}")
    print("=" * 50)

def text_to_ascii_art(text, colors):
    """Metni renkli ASCII sanatƒ±na d√∂n√º≈üt√ºr√ºr."""
    if not text:
        return []
    
    # Her karakterin ASCII temsilini al
    char_patterns = []
    char_colors = []
    
    for i, char in enumerate(text):
        if char in ASCII_MAP:
            char_patterns.append(ASCII_MAP[char])
        else:
            # Desteklenmeyen karakter i√ßin placeholder kullan
            char_patterns.append(ASCII_MAP['?'])
        
        # Her karakter i√ßin renk se√ß
        if len(colors) == 1:
            char_colors.append(colors[0])
        else:
            char_colors.append(colors[i % len(colors)])
    
    # ASCII sanatƒ± satƒ±rlarƒ±nƒ± olu≈ütur
    ascii_lines = []
    for row in range(5):  # Her karakter 5 satƒ±r y√ºksekliƒüinde
        line = ""
        for i, pattern in enumerate(char_patterns):
            colored_pattern = f"{char_colors[i]}{pattern[row]}{Colors.RESET}"
            line += colored_pattern + " "  # Karakterler arasƒ± bo≈üluk
        ascii_lines.append(line.rstrip())  # Sondaki bo≈üluklarƒ± temizle
    
    return ascii_lines

def name_to_shape_ascii(name, colors):
    """ƒ∞simden ASCII sanatƒ± + ≈üekil olu≈üturur."""
    # ƒ∞smi ASCII harflerle olu≈ütur
    name_ascii = text_to_ascii_art(name, colors)
    
    # ƒ∞simle e≈üle≈üen ≈üekli bul
    shape_key = NAME_TO_SHAPE.get(name)
    
    if shape_key and shape_key in ASCII_SHAPES:
        shape_lines = ASCII_SHAPES[shape_key]
        # ≈ûekli renklendir
        colored_shape = []
        for i, line in enumerate(shape_lines):
            color = colors[i % len(colors)]
            colored_shape.append(f"{color}{line}{Colors.RESET}")
        
        return name_ascii, colored_shape, shape_key
    else:
        return name_ascii, None, None

def print_ascii_art(ascii_lines, text):
    """Renkli ASCII sanatƒ±nƒ± ekrana yazdƒ±rƒ±r."""
    border = f"{Colors.BOLD}{Colors.CYAN}{'='*80}{Colors.RESET}"
    
    print("\n" + border)
    print(f"{Colors.BOLD}{Colors.GOLD}üé® ASCII SANAT √áIKTISI: '{text.upper()}' üé®{Colors.RESET}")
    print(border)
    print()
    
    for line in ascii_lines:
        print(f"  {line}")
    
    print()
    print(border + "\n")

def print_name_shape_art(name_ascii, shape_lines, name, shape_name):
    """ƒ∞sim + ≈üekil ASCII sanatƒ±nƒ± ekrana yazdƒ±rƒ±r."""
    border = f"{Colors.BOLD}{Colors.CYAN}{'='*80}{Colors.RESET}"
    
    print("\n" + border)
    print(f"{Colors.BOLD}{Colors.GOLD}üé≠ ƒ∞Sƒ∞M + ≈ûEKƒ∞L ASCII SANAT: '{name.upper()}' üé≠{Colors.RESET}")
    print(border)
    
    # ƒ∞sim ASCII'sini yazdƒ±r
    print(f"\n{Colors.BOLD}{Colors.MAGENTA}üìù ƒ∞Sƒ∞M:{Colors.RESET}")
    for line in name_ascii:
        print(f"  {line}")
    
    # ≈ûekli yazdƒ±r
    if shape_lines:
        print(f"\n{Colors.BOLD}{Colors.GREEN}üé® ≈ûEKƒ∞L ({shape_name.upper()}):{Colors.RESET}")
        for line in shape_lines:
            print(f"  {line}")
    else:
        print(f"\n{Colors.YELLOW}‚ö†Ô∏è  '{name}' i√ßin √∂zel ≈üekil bulunamadƒ±. Sadece isim g√∂steriliyor.{Colors.RESET}")
        print(f"{Colors.CYAN}üí° Desteklenen isimler i√ßin men√ºden '?' se√ßeneƒüini kullanƒ±n.{Colors.RESET}")
    
    print("\n" + border + "\n")

def normal_ascii_mode():
    """Normal ASCII sanatƒ± modu."""
    while True:
        try:
            # Renk temasƒ± se√ß
            selected_colors = show_color_menu()
            print()
            
            # Kullanƒ±cƒ±dan metin al
            user_text = get_user_input()
            
            # ASCII sanatƒ±na d√∂n√º≈üt√ºr
            ascii_art = text_to_ascii_art(user_text, selected_colors)
            
            # Ekrana yazdƒ±r
            print_ascii_art(ascii_art, user_text)
            
            # Devam etmek isteyip istemediƒüini sor
            continue_choice = input(f"{Colors.BOLD}Bu modda ba≈üka bir metin denemek ister misiniz? (e/h): {Colors.RESET}").lower()
            if continue_choice not in ['e', 'evet', 'y', 'yes']:
                break
            
            print("\n" + "-"*60 + "\n")
                
        except KeyboardInterrupt:
            break
        except Exception as e:
            print(f"{Colors.RED}Beklenmeyen bir hata olu≈ütu: {e}{Colors.RESET}")

def name_shape_ascii_mode():
    """ƒ∞sim + ≈üekil ASCII sanatƒ± modu."""
    while True:
        try:
            # Desteklenen isimleri g√∂ster
            show_supported_names()
            
            # Renk temasƒ± se√ß
            selected_colors = show_color_menu()
            print()
            
            # Kullanƒ±cƒ±dan isim al
            user_name = get_name_input()
            
            # ƒ∞sim + ≈üekil ASCII sanatƒ±na d√∂n√º≈üt√ºr
            name_ascii, shape_lines, shape_name = name_to_shape_ascii(user_name, selected_colors)
            
            # Ekrana yazdƒ±r
            print_name_shape_art(name_ascii, shape_lines, user_name, shape_name)
            
            # Devam etmek isteyip istemediƒüini sor
            continue_choice = input(f"{Colors.BOLD}Bu modda ba≈üka bir isim denemek ister misiniz? (e/h): {Colors.RESET}").lower()
            if continue_choice not in ['e', 'evet', 'y', 'yes']:
                break
            
            print("\n" + "-"*60 + "\n")
                
        except KeyboardInterrupt:
            break
        except Exception as e:
            print(f"{Colors.RED}Beklenmeyen bir hata olu≈ütu: {e}{Colors.RESET}")

def main():
    """Ana program fonksiyonu."""
    clear_screen()
    
    # Ba≈ülƒ±k
    print(f"{Colors.BOLD}{Colors.GOLD}üé® T√úRK√áE DESTEKLƒ∞ RENKLƒ∞ ASCII ART GENERATOR üé®{Colors.RESET}")
    print(f"{Colors.CYAN}{'='*60}{Colors.RESET}")
    print(f"{Colors.GREEN}‚ú® T√ºrk√ße karakterler desteklenir: √ß, ≈ü, ƒ±, ƒü, √∂, √º{Colors.RESET}")
    print(f"{Colors.BLUE}üìù Normal ASCII veya ƒ∞sim + ≈ûekil ASCII se√ßenekleri{Colors.RESET}")
    print(f"{Colors.MAGENTA}üåà Renkli √ßƒ±ktƒ± ile g√ºzel g√∂r√ºn√ºm!{Colors.RESET}")
    print(f"{Colors.RED}‚ùå √áƒ±kmak i√ßin Ctrl+C tu≈ülayƒ±n.{Colors.RESET}\n")
    
    while True:
        try:
            # Ana men√ºy√º g√∂ster
            menu_choice = show_main_menu()
            print()
            
            if menu_choice == '1':
                # Normal ASCII modu
                normal_ascii_mode()
            elif menu_choice == '2':
                # ƒ∞sim + ≈üekil ASCII modu
                name_shape_ascii_mode()
            elif menu_choice == '3':
                # √áƒ±kƒ±≈ü
                print(f"{Colors.GOLD}G√ºle g√ºle! üëã‚ú®{Colors.RESET}")
                break
            
            print("\n" + "="*60 + "\n")
                
        except KeyboardInterrupt:
            print(f"\n\n{Colors.GOLD}G√ºle g√ºle! üëã‚ú®{Colors.RESET}")
            break
        except Exception as e:
            print(f"{Colors.RED}Beklenmeyen bir hata olu≈ütu: {e}{Colors.RESET}")

if __name__ == "__main__":
    main()
